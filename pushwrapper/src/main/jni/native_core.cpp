/* DO NOT EDIT THIS FILE - it is machine generated */
#include "native_core.h"
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <android/log.h>
#include <pthread.h>

#include "comm/jni/util/JNI_OnLoad.h"
#include <android/log.h>
#include <pthread.h>
#include "comm/jni/util/var_cache.h"
#include "comm/jni/util/scope_jenv.h"

using namespace std;

pthread_key_t g_env_key;

static void __DetachCurrentThread(void* a) {
    if (NULL != VarCache::Singleton()->GetJvm()) {
        VarCache::Singleton()->GetJvm()->DetachCurrentThread();
    }
}

typedef jobject(*JNI_TO_OBJECT)(JNIEnv *env, JAVA_CLASS_TYPE type, void* ptr);

JavaVM *g_JavaVM = NULL;
const char* g_java_class_name[] = {
        "java/lang/String",
        "java/lang/Integer",
        "com/panda/org/pushwrapper/core/LinkCore",
        "com/panda/org/pushwrapper/aidl/LongLinkConfItem",
        "com/panda/org/pushwrapper/aidl/MsgItem"
};

jobject g_java_class_obj[JAVA_CLASS_MAX] = { NULL };
jmethodID g_java_class_construct[JAVA_CLASS_MAX] = { NULL };

jmethodID g_static_method[JAVA_STATIC_METHOD_MAX] = { NULL };

int jniRegisterNativeMethods(JNIEnv* env, jclass clazz/*const char* className*/,
                             const JNINativeMethod* gMethods, int numMethods) {
    //jclass clazz;

    //clazz = env->FindClass(className);

    if (clazz == NULL) {
        return -1;
    }

    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
        return -1;
    }

    return 0;

}

int OnPushMsgProc(int msg, char* wparam, unsigned long lParam)
{
    LOGI("CallbackBuffer OnPushMsgProc: sytem msg proc entry : %d\n",msg);
	JNIEnv *env = CN_NULL;
	CN_ATTACH_JVM(env);

	jobject result = CN_NULL;
	jclass jclazz = env->GetObjectClass(JNI_GET_CLASS_OBJ(JAVA_CLASS_LINKCORE));
	env->CallStaticVoidMethod(jclazz, JNI_GET_STATIC_METHOD(JAVA_STATIC_METHOD_SYS), msg, result, (int)lParam);

	JNI_DELETE_LOCAL_REF(result);
	JNI_DELETE_LOCAL_REF(jclazz);
	CN_DETACH_JVM(env);
	LOGI("CallbackBuffer OnPushMsgProc: sytem msg proc exit\n");
	return 0;
}

static void JNI_initClassHelper(JNIEnv *env, const char *path, jobject *objptr, jmethodID *construct, JAVA_CLASS_TYPE i) {
    jclass cls = env->FindClass(path);
    if (!cls) {
        LOGE("initClassHelper: failed to get %s class reference", path);
        return;
    }
    jmethodID constr = NULL;
    if (JAVA_CLASS_INTEGER == i)
    {
        constr = env->GetMethodID(cls, "<init>", "(I)V");
    }
    else
    {
        constr = env->GetMethodID(cls, "<init>", "()V");
    }
    if (!constr) {
        LOGE("initClassHelper: failed to get %s constructor", path);
        return;
    }
    jobject obj = env->NewObject(cls, constr);
    if (!obj) {
        LOGE("initClassHelper: failed to create a %s object", path);
        return;
    }
    *construct = constr;
    (*objptr) = env->NewGlobalRef(obj);
}

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
    JNIEnv *env;
    jclass clazz;
    jint result = -1;
    jint i;

    if (vm->GetEnv((void**)&env, JNI_VERSION_1_6) != JNI_OK)
    {
		LOGE("ERROR: GetEnv failed\n");
		return -1;
    }

    if (0 != pthread_key_create(&g_env_key, __DetachCurrentThread)) {
        __android_log_print(ANDROID_LOG_ERROR, "MicroMsg", "create g_env_key fail");
        return(-1);
    }

    ScopeJEnv jenv(vm);
    VarCache::Singleton()->SetJvm(vm);

    LoadClass(jenv.GetEnv());
    LoadStaticMethod(jenv.GetEnv());
    LoadMethod(jenv.GetEnv());

    std::vector<JniOnload_t>& ref = BOOT_REGISTER_CONTAINER<JniOnload_t>() ;
    for (std::vector<JniOnload_t>::const_iterator it= ref.begin(); it!=ref.end(); ++it)
    {
        it->func(vm, reserved);
    }

    if ((clazz = env->FindClass((const char*)JNI_GET_CLASS_NAME(JAVA_CLASS_LINKCORE))) == NULL)
    {
        goto error;
    }

    if (register_android_jni_link_module(env,clazz) != JNI_OK){
        goto error;
    }

    JNI_SET_STATIC_METHOD(JAVA_STATIC_METHOD_SYS, env->GetStaticMethodID(clazz, "cnSysMsgProcInner", "(ILjava/lang/Object;I)V"));

    JNI_DELETE_LOCAL_REF(clazz);

    //load global object
    for (int i = 0; i < JAVA_CLASS_MAX; i++)
    {
        JNI_initClassHelper(env, (const char *)JNI_GET_CLASS_NAME(i), &JNI_GET_CLASS_OBJ(i), &JNI_GET_CLASS_CONSTRUCT_METHODE(i), (JAVA_CLASS_TYPE)i);
    }

    result = JNI_VERSION_1_6;
    g_JavaVM = vm;

error:
    return result;
}

JNIEXPORT void JNI_OnUnload(JavaVM *vm, void *reserved)
{
    JNIEnv *env;
    jclass k;
    jint r;
    jobject tmp;

    VarCache::Release();

    r = vm->GetEnv((void **)&env, JNI_VERSION_1_4);
    k = env->FindClass((const char*)JNI_GET_CLASS_NAME(JAVA_CLASS_LINKCORE));
    env->UnregisterNatives(k);
    JNI_DELETE_LOCAL_REF(k);

    for (r = 0; r < JAVA_CLASS_MAX; r++)
    {
        tmp = JNI_GET_CLASS_OBJ(r);
        if (NULL != tmp)
        {
            env->DeleteGlobalRef(tmp);
        }
    }

    LOGI("JNI_OnUnload: exit success\n");
}

void cnSetInt(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jint value)
{
    jfieldID fieldId = JNI_GET_FIELD_INT_ID(jclazz, sig);
    env->SetIntField(obj, fieldId, value);
}

void cnSetByte(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jbyte value)
{
    jfieldID fieldId = JNI_GET_FIELD_BYTE_ID(jclazz, sig);
    env->SetByteField(obj, fieldId, value);
}

void cnSetLong(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jlong value)
{
    jfieldID fieldId = JNI_GET_FIELD_LONG_ID(jclazz, sig);
    env->SetLongField(obj, fieldId, value);
}
void cnSetDouble(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jdouble value)
{
    jfieldID fieldId = JNI_GET_FIELD_DOUBLE_ID(jclazz, sig);
    env->SetDoubleField(obj, fieldId, value);
}
void cnSetLongId(JNIEnv *env, jclass jclazz, jobject obj, jfieldID fieldId, jlong value)
{
    env->SetLongField(obj, fieldId, value);
}

void cnSetString(JNIEnv *env, jclass jclazz, jobject obj, const char* sig,const char* value)
{
    jstring tmp;
    if (support_comm_is_utf8(value) == 1){
        tmp = env->NewStringUTF(value);
    }
    else{
        tmp = env->NewStringUTF((const char*)"");
    }
    jfieldID fieldId = JNI_GET_FIELD_STR_ID(jclazz, sig);
    env->SetObjectField(obj, fieldId, tmp);
    JNI_DELETE_LOCAL_REF(tmp);

}

void cnSetObject(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jobject value)
{
    jfieldID fieldId = JNI_GET_FIELD_OBJ_ID_NAME(sig);
    env->SetObjectField(obj, fieldId, value);
}

void cnSetArray(JNIEnv *env, jclass jclazz, jobject obj, const char* sig,jobject value)
{
    jfieldID array_id = JNI_GET_FIELD_ARRAY_ID(jclazz, sig);
    env->SetObjectField(obj, array_id, value);
}

void cnSetStringId(JNIEnv *env, jclass jclazz, jobject obj, jfieldID fieldId, CHAR* value)
{
    jstring tmp = env->NewStringUTF((const char*)value);
    env->SetObjectField(obj, fieldId, tmp);
    JNI_DELETE_LOCAL_REF(tmp);
}

void cnSetBoolean(JNIEnv *env, jclass jclazz, jobject obj, const char* sig, jboolean value)
{
    jfieldID fieldId = env->GetFieldID(jclazz, sig, "Z");
    env->SetBooleanField(obj, fieldId, value);
}

jobjectArray StringArrayToObjectArray(JNIEnv *env, CHAR** tmp, INT32S len)
{
    if (len <= 0 || CN_NULL == tmp)
    {
        return NULL;
    }
    jclass objClass = env->GetObjectClass(JNI_GET_CLASS_OBJ(JAVA_CLASS_STRING));
    jobjectArray  ret = env->NewObjectArray(len, objClass, 0);
    jstring str;
    INT32S i;

    for (i = 0; i < len; i++)
    {
        str = env->NewStringUTF((const char*)tmp[i]);
        if (NULL != str)
        {
            env->SetObjectArrayElement(ret, i, str);
            JNI_DELETE_LOCAL_REF(str);
        }
    }
    JNI_DELETE_LOCAL_REF(objClass);

    return ret;
}

jstring CharToJstring(JNIEnv *env, const CHAR* c_char)
{
    jstring jstr = NULL;
    if (c_char != NULL) {
        jstr = env->NewStringUTF(c_char);
    }
    return jstr;
}

std::string GetString(CHAR* c_char)
{
    return (c_char != NULL ? std::string(c_char) : NULLSTR);
}

char* jstringToChar(JNIEnv* env, jstring jstr) {
    char* rtn = NULL;
    jclass clsstring = env->FindClass("java/lang/String");
    jstring strencode = env->NewStringUTF("utf-8");
    jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
    jbyteArray barr = (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
    jsize alen = env->GetArrayLength(barr);
    jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
    if (alen > 0) {
        rtn = (char*)malloc(alen + 1);
        memcpy(rtn, ba, alen);
        rtn[alen] = 0;
    }
    env->ReleaseByteArrayElements(barr, ba, 0);

    JNI_DELETE_LOCAL_REF(strencode);
    JNI_DELETE_LOCAL_REF(clsstring);
    return rtn;
}

std::string jstringToStdstring(JNIEnv *env, jstring jstr){

    std::string ret = "";
    if (jstr != NULL){
        char* chardata = jstringToChar(env, jstr);
        ret = (chardata != NULL ? std::string(chardata) : NULLSTR);
        free(chardata);
        chardata=NULL;
    }
    else{

    }
    return ret;
}

